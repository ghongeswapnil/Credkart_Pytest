{"name": "test_UserRegistration_001", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_UserLogin1.Test_User_Profile object at 0x00000265013D3890>\n\n    def test_UserRegistration_001(self):\n        # 1 Browser Open\n        self.driver = webdriver.Chrome()\n        self.driver.maximize_window()\n        self.ur = Registration_Class(self.driver)\n        # 2 Go to registration url\n        self.driver.get(\"https://automation.credence.in/register\")\n    \n        # 3 Enter Name\n        # self.driver.find_element(By.ID, \"name\").send_keys(\"Rohit\")\n        self.ur.Enter_Name(\"Puja\")\n    \n        # 4 Enter EMail Id\n        # self.driver.find_element(By.ID,\"email\").send_keys(\"puja123@gmail.com\")\n        self.ur.Enter_Email(\"puja101@gmail.com\")\n    \n        # 5 Enter Password\n        # self.driver.find_element(By.ID, \"password\").send_keys(\"Puja@123\")\n        self.ur.Enter_Password(\"Puja@123\")\n    \n        # 6 Enter Confirm Password\n        # self.driver.find_element(By.ID, \"password-confirm\").send_keys(\"Puja@123\")\n        self.ur.Enter_Confirm_Password(\"Puja@123\")\n    \n        # 7 Click on Register Button\n        # self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        self.ur.Click_RegisterButton()\n    \n        time.sleep(10)\n    \n        # 8 Validate Registration\n        try:\n>           self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n\ntestCases\\test_UserLogin1.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002650166ED10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x76C27BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76FCBD2B+107]\\\\n\\\\tRtlClearBits [0x76FCBCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: chrome=114.0.5735.199); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0054A813+48355]\nE       \t(No symbol) [0x004DC4B1]\nE       \t(No symbol) [0x003E5358]\nE       \t(No symbol) [0x004109A5]\nE       \t(No symbol) [0x00410B3B]\nE       \t(No symbol) [0x0043E232]\nE       \t(No symbol) [0x0042A784]\nE       \t(No symbol) [0x0043C922]\nE       \t(No symbol) [0x0042A536]\nE       \t(No symbol) [0x004082DC]\nE       \t(No symbol) [0x004093DD]\nE       \tGetHandleVerifier [0x007AAABD+2539405]\nE       \tGetHandleVerifier [0x007EA78F+2800735]\nE       \tGetHandleVerifier [0x007E456C+2775612]\nE       \tGetHandleVerifier [0x005D51E0+616112]\nE       \t(No symbol) [0x004E5F8C]\nE       \t(No symbol) [0x004E2328]\nE       \t(No symbol) [0x004E240B]\nE       \t(No symbol) [0x004D4FF7]\nE       \tBaseThreadInitThunk [0x76C27BA9+25]\nE       \tRtlInitializeExceptionChain [0x76FCBD2B+107]\nE       \tRtlClearBits [0x76FCBCAF+191]\n\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_UserLogin1.Test_User_Profile object at 0x00000265013D3890>\n\n    def test_UserRegistration_001(self):\n        # 1 Browser Open\n        self.driver = webdriver.Chrome()\n        self.driver.maximize_window()\n        self.ur = Registration_Class(self.driver)\n        # 2 Go to registration url\n        self.driver.get(\"https://automation.credence.in/register\")\n    \n        # 3 Enter Name\n        # self.driver.find_element(By.ID, \"name\").send_keys(\"Rohit\")\n        self.ur.Enter_Name(\"Puja\")\n    \n        # 4 Enter EMail Id\n        # self.driver.find_element(By.ID,\"email\").send_keys(\"puja123@gmail.com\")\n        self.ur.Enter_Email(\"puja101@gmail.com\")\n    \n        # 5 Enter Password\n        # self.driver.find_element(By.ID, \"password\").send_keys(\"Puja@123\")\n        self.ur.Enter_Password(\"Puja@123\")\n    \n        # 6 Enter Confirm Password\n        # self.driver.find_element(By.ID, \"password-confirm\").send_keys(\"Puja@123\")\n        self.ur.Enter_Confirm_Password(\"Puja@123\")\n    \n        # 7 Click on Register Button\n        # self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n        self.ur.Click_RegisterButton()\n    \n        time.sleep(10)\n    \n        # 8 Validate Registration\n        try:\n            self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n            print(\"Registration pass\")\n            assert True\n        except:\n            print(\"Registration Fail\")\n>           assert False\nE           assert False\n\ntestCases\\test_UserLogin1.py:48: AssertionError"}, "attachments": [{"name": "stdout", "source": "30ebf003-103d-4333-8aaa-f2d92bcd28be-attachment.txt", "type": "text/plain"}], "start": 1708481423682, "stop": 1708481446280, "uuid": "c7fec551-aedf-45bb-a48b-348da5107859", "historyId": "4cfb2970cf6f53f3ade23d1b2072dcc0", "testCaseId": "4cfb2970cf6f53f3ade23d1b2072dcc0", "fullName": "testCases.test_UserLogin1.Test_User_Profile#test_UserRegistration_001", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_UserLogin1"}, {"name": "subSuite", "value": "Test_User_Profile"}, {"name": "host", "value": "DESKTOP-IE6ML59"}, {"name": "thread", "value": "8376-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_UserLogin1"}]}